from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from .database import Database

router = Router()

class IdeaStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_description = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–¥–µ–π. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üìù /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∏–¥–µ—é\n"
        "üé≤ /random - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é\n"
        "üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–¥–µ–π\n"
        "‚ùì /help - –ü–æ–º–æ—â—å"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ <b>–ë–æ—Ç –¥–ª—è –∏–¥–µ–π - –ü–æ–º–æ—â—å</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∏–¥–µ—é
‚Ä¢ /random - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é
‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–¥–µ–π
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–¥–µ–π:</b>
‚Ä¢ üè† –î–æ–º - –∏–¥–µ–∏ –¥–ª—è –¥–æ–º–∞
‚Ä¢ üåç –í–Ω–µ—à–Ω–∏–π –ò–≤–µ–Ω—Ç - –∏–¥–µ–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –î–æ–±–∞–≤—å—Ç–µ –∏–¥–µ—é –∫–æ–º–∞–Ω–¥–æ–π /add
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
3. –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏
4. –ü–æ–ª—É—á–∞–π—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∏–¥–µ–∏ –∫–æ–º–∞–Ω–¥–æ–π /random
5. –ü–æ–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏–¥–µ–∏
    """
    await message.answer(help_text, parse_mode="HTML")

@router.message(Command("add"))
async def cmd_add(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add - –Ω–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–¥–µ–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üè† –î–æ–º", callback_data="category_home")
    builder.button(text="üåç –í–Ω–µ—à–Ω–∏–π –ò–≤–µ–Ω—Ç", callback_data="category_external")
    builder.adjust(2)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–π –∏–¥–µ–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(IdeaStates.waiting_for_category)

@router.callback_query(F.data.startswith("category_"))
async def process_category_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split("_")[1]
    await state.update_data(category=category)
    
    category_names = {
        "home": "üè† –î–æ–º",
        "external": "üåç –í–Ω–µ—à–Ω–∏–π –ò–≤–µ–Ω—Ç"
    }
    
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_names[category]}\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–¥–µ–∏:"
    )
    await state.set_state(IdeaStates.waiting_for_description)

@router.message(IdeaStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏–¥–µ–∏"""
    data = await state.get_data()
    category = data["category"]
    description = message.text
    
    try:
        idea_id = await db.add_idea(
            user_id=message.from_user.id,
            username=message.from_user.username or message.from_user.first_name,
            category=category,
            description=description
        )
        
        category_names = {
            "home": "üè† –î–æ–º",
            "external": "üåç –í–Ω–µ—à–Ω–∏–π –ò–≤–µ–Ω—Ç"
        }
        
        await message.answer(
            f"‚úÖ –ò–¥–µ—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_names[category]}\n"
            f"üÜî <b>ID:</b> {idea_id}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–¥–µ–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Error adding idea: {e}")
    
    await state.clear()

@router.message(Command("random"))
async def cmd_random(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∏–¥–µ–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∏–¥–µ—è", callback_data="random_any")
    builder.button(text="üè† –¢–æ–ª—å–∫–æ –¥–æ–º", callback_data="random_home")
    builder.button(text="üåç –¢–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–π", callback_data="random_external")
    builder.adjust(1)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ª—É—á–∞–π–Ω–æ–π –∏–¥–µ–∏:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("random_"))
async def process_random_selection(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–ª—É—á–∞–π–Ω–æ–π –∏–¥–µ–∏"""
    random_type = callback.data.split("_")[1]
    
    if random_type == "any":
        category = None
        category_text = "–ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    elif random_type == "home":
        category = "home"
        category_text = "üè† –î–æ–º"
    else:
        category = "external"
        category_text = "üåç –í–Ω–µ—à–Ω–∏–π –ò–≤–µ–Ω—Ç"
    
    idea = await db.get_random_idea(category)
    
    if not idea:
        await callback.message.edit_text(
            f"üòî –ò–¥–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_text} –ø–æ–∫–∞ –Ω–µ—Ç.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∏–¥–µ—é –∫–æ–º–∞–Ω–¥–æ–π /add!"
        )
        return
    
    category_names = {
        "home": "üè† –î–æ–º",
        "external": "üåç –í–Ω–µ—à–Ω–∏–π –ò–≤–µ–Ω—Ç"
    }
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{idea['id']}")
    builder.button(text="üîÑ –î—Ä—É–≥–∞—è –∏–¥–µ—è", callback_data=f"regenerate_{random_type}")
    builder.adjust(2)
    
    await callback.message.edit_text(
        f"üé≤ <b>–°–ª—É—á–∞–π–Ω–∞—è –∏–¥–µ—è {category_text}:</b>\n\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {idea['description']}\n"
        f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> @{idea['username']}\n"
        f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–∞:</b> {idea['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
        f"üÜî <b>ID:</b> {idea['id']}",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("complete_"))
async def process_complete_idea(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ—Ç–∫–∏ –∏–¥–µ–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
    idea_id = int(callback.data.split("_")[1])
    
    try:
        success = await db.mark_idea_completed(idea_id)
        if success:
            await callback.message.edit_text(
                "‚úÖ –ò–¥–µ—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!\n\n"
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º!"
            )
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∏–¥–µ—é –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.")
    except Exception as e:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Error completing idea: {e}")

@router.callback_query(F.data.startswith("regenerate_"))
async def process_regenerate_idea(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –∏–¥–µ–∏"""
    random_type = callback.data.split("_")[1]
    
    if random_type == "any":
        category = None
        category_text = "–ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    elif random_type == "home":
        category = "home"
        category_text = "üè† –î–æ–º"
    else:
        category = "external"
        category_text = "üåç –í–Ω–µ—à–Ω–∏–π –ò–≤–µ–Ω—Ç"
    
    idea = await db.get_random_idea(category)
    
    if not idea:
        await callback.message.edit_text(
            f"üòî –ë–æ–ª—å—à–µ –∏–¥–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_text} –Ω–µ—Ç.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –∫–æ–º–∞–Ω–¥–æ–π /add!"
        )
        return
    
    category_names = {
        "home": "üè† –î–æ–º",
        "external": "üåç –í–Ω–µ—à–Ω–∏–π –ò–≤–µ–Ω—Ç"
    }
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{idea['id']}")
    builder.button(text="üîÑ –î—Ä—É–≥–∞—è –∏–¥–µ—è", callback_data=f"regenerate_{random_type}")
    builder.adjust(2)
    
    await callback.message.edit_text(
        f"üé≤ <b>–ù–æ–≤–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∏–¥–µ—è {category_text}:</b>\n\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {idea['description']}\n"
        f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> @{idea['username']}\n"
        f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–∞:</b> {idea['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
        f"üÜî <b>ID:</b> {idea['id']}",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@router.message(Command("stats"))
async def cmd_stats(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–¥–µ–π"""
    try:
        total_count = await db.get_ideas_count()
        home_count = await db.get_ideas_count("home")
        external_count = await db.get_ideas_count("external")
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–¥–µ–π:</b>

üéØ <b>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–¥–µ–π:</b> {total_count}
üè† <b>–ò–¥–µ–∏ –¥–ª—è –¥–æ–º–∞:</b> {home_count}
üåç <b>–í–Ω–µ—à–Ω–∏–µ –∏–¥–µ–∏:</b> {external_count}

üí° –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –∫–æ–º–∞–Ω–¥–æ–π /add
üé≤ –ü–æ–ª—É—á–∞–π—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∏–¥–µ–∏ –∫–æ–º–∞–Ω–¥–æ–π /random
        """
        
        await message.answer(stats_text, parse_mode="HTML")
        
    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Error getting stats: {e}")
